대입연산자 =
a = 1
a에 1을 대입한다.

동등 연산자 ==
-좌항과 우항을 비교해서 같다면 ture ,다르다면 false
alert(1 == 2) false
alert(1 == 1) true


일치 연산자 === 
좌항과 우항이 정확하게 일치하느냐 묻는다.
alert(1 === "1") =false

alert(1 === "1") = 현재 데이터의 타입과 데이터 형식이 다르다면 다른 값이다.

alert(1 == "1");  --- 실질적으로 비슷하면 같다라고 하는 값이 같다면 true- 
이러한 부분은 버그를 만들기 쉬운 프로그램이 될수있다.
프로그램이 아주 복잡한것을 처리할때는 더욱 정확하게 사용해야하는 
부분이다.


동등연산자와 일치 연산자의 심화 비교

var a;
undefined
alert(a)
undefined   --- 정의 되지않았다  --- 프로그래머가 의도하지 않은상황


var a = null   --프로그래머가 값이 없다고 의도한형식
undefined


타입
Boolean  true/ false
number  -1 0 1 2 3
String "a", "b", "c";
undefined undefined
null null


동등연산자는 숫자 1을 true 로간주 , 그 이외는 false로 간주
일치 연산자는 문자 1과 true는 false로 간주
일반적으로 일치 연산자를 사용하는것을 권장(같은것만 같다)

=============================================

!= (부정연산자)

alert(1!=2) ; 


!==
!==는 !=와 ==의 관계와 같다. 정확하게 같지 않다는 의미이다.


부등호
>
>=
=========================================

조건문

중요한부분.
-주어진 조건에 따라서 애플리케이션을 다르게 동작하도록 하는것이다.

문법
if

if(true){
	alert('result : true');
} -- 실행됨.

if(false){
	alert('result : true');
} --실행되지 않음.


if(true){
alert(1);
alert(2);
alert(3);
alert(4);
} 
alert(5);   ---12345 출력됨.

if(false){
alert(1);
alert(2);
alert(3);
alert(4);
} 
alert(5);   --5만 출력됨.


else

앞의 조건문에서 실행되지 않았을때 else구문이 실행됨.
if(false){
alert(1);
}else if(true){
alert(2);   ---2만실행됨.
}else if(true){
alert(3);
}else {
alert(4)
}

조건문 응용
if(boolean이  들어간다.
참일수도 거짓일수도있다.)


a = 1
1
if(a===1){
    alert(1);
}
undefined
prompt("당신의 나이는?")
'18'
prompt("당신의 나이는?")
'20'

alert(prompt('당신의 나이는?'))  -- 경고창에서 입력하고 경고창에서 출력이됨.

==========================================

논리연산자

&& = and

||  = or

! = not

boolean 대체제
=javascript에서 숫자 1은 true
javascript에서 숫자 0은 false

if(문자열이 들어가면 true)
javascript에서 false로 간주하는 형식
if('')
if(undefined)
============================================

반복문(loop, iterate)
for, while

while기법 (무한 루프)

while(조건){  --조건은  boolean , 조건이 true일경우 반복문실행.
	반복해서 실행할 코드
}

while문 -  초기화 값이나 반복의 조건이 없다면 무한 루플에 빠진다.

for 문
	(초기화; 조건; 추가조건)
for(var i = 0; i<10; i++){
i = i + 1  == i++

여기서 ++i 와  i++ 차이는
i = 0 
alert(++i)  === i가 0인상태에서 먼저 1을 증가해서 출력

i = 0 
alert(i++)  === i가 0인상태에서 다음연산에 1을 증가해 출력

같은 의미이지만 사용하는 방법에 따라 다름,.



================================

반복문의 효용성
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")
document.write("coding everybody")


위와 같은 코드를 작성한다면 너무 비효율적이다,.
===========================================

반복문의 제어

break - 반복문의 종료
continue - 조건의 순간은 반응하지않고 반복문은 계속 진행

for (var i = 0; i < 10; i++){
            if(i === 5){
                continue;   / break;
            }
            document.write("coding everybody"+i+"<br />")
        }
===========================================

반복문의 중첩
for (var i = 0; i < 10; i++){  ---
            for(var j = 0; j<10; j++){
                document.write("coding everybody"+i+j+"<br />")
            }  --위와 같이 '문자열'+숫자+문자열 이면 중간의 숫자를 문자열로 인식한다
        }

디버거 - 버그를 제거하는 행위의 도구

중첩 반복문 형식
for (var i = 0; i < 10; i++){  --- i 를 1번 실행했을때 
            for(var j = 0; j<10; j++){ j 를 10번실행하게 되고 
				j가 10번 실행되면 다시 i for문으로 돌아가서 2가되고 
				다시 j가 10번실행되는 구조이다.

==========================================

함수

함수란 하나의 로직을 재실행 할수있도록 하는것으로 콛드의 재 사용성을 높여준다.

함수의 형식
function 함수명 ([인자...[,인자]]){
	코드
return 반환값.

function numbering(){
            document.write(1);
        }  --함수 정의함.
numbering()   ===  document.write(1); 과 같은 의미.  ---함수 호출

변수정의할때
var a = 1   a-를 정의함.
alert(a) - a호출

}

=================================================
함수의 효용


function numbering(){
            i = 0;
            while(i < 20){
                document.write(i+"<br />");
                i += 1;
            }
        }
        이렇게 하면 한번의 함수로 간단하게 처리할수있음.

만약 같은 것을 10000번 반복하라고 한다면.

 for(var i=0; i<10000; i++){
            var i = 0;
            while(i < 20){
                document.write(i+"<br />");
                i += 1;
            }
        }

        결국 함수는 (유지보수)재사용성-여러 곳에서 하나만 고치면 다시 편하게 사용할수있는것을 의미한다.


====================================================================

함수의 입력과 출력

출력부터

return  -1 함수를 종료,
         2 -return 뒤에 있는 값을 반환한다.(함수 바깥으로 뱉어낸다.)

function get_member1(){
                return 'egoing'; -- egoing 만 출력됨. 나머지는 출력안됨. return 후 종료됨.
                return 'leezche';
                return 'graphittie';
            }

            alert(get_member1());              '


입력

function get_argument(arg){
                return arg;  --결국 arg는 괄호 안에 arg의 변수를 호출
            }  --arg = 매개변수

            alert(get_argument(1));   숫자는 인자 parameter라고 한다.

            alert(get_argument(2));

            그런데 함수라면 
            정적인것이 아니라 입력된 값에 따라 출력된 값이 달라지게 만드는것이 진정한 함수이다.


,

function get_argument(arg1, arg2){
    return arg1 + arg2
}

alert(get_argument(10,20))

===============================================================================

함수를 정의하는 다른방법

numbering = function (){
                i = 0;
                while(i < 10){
                    document.write(i);
                    i += 1;
                }
            }

            numbering();  -- 변수에 함수를 대입해서 변수를 호출하는 방식이다.


---------------------------------------------------- 위 함수와 동일

            function numbering(){
                i = 0;
                while(i < 10){
                    document.write(i);
                    i += 1;
                }
            }

            numbering()
-----------------------------------------------------또다른 방법아래
(function(){
        i = 0;
        while(i < 10){
            document.write(i);
            i += 1;
                }
})();   --이름을 지정하지않고 함수를 먼저 괄호로 묶고 함수 호출시 ()를 붙이면 함수를 
바로 호출하는 형식이 되는데  ... 그것을 익명함수라고한다.

===================================================================

배열

연관되어있는 데이터를 모아서 통으로 관리하기위해서 사용하는 데이터 타입이다.
하나의 그릇이라고 생각하면된다.


var member = ['egoing','k8805','sorialgi'];
undefined
member
(3) ['egoing', 'k8805', 'sorialgi']
alert(member)
undefined
member[0]
'egoing'
member[1]
'k8805'
member[2]
'sorialgi'
member.length
3

색인 - index  각각의 값의 고유한 값.


배열이 없다면????


/*
                function get_member1(){
                    return 'egoing';
                }

                document.write(get_member1());


                function get_member2(){
                    return 'egoing';
                }

                document.write(get_member2());
                
                function get_member3(){
                    return 'egoing';
                }

                document.write(get_member3());


위 함수 값을 아래 함수로 통합해서 하나의 함수로 만들어 같은 값을 나오게 만들수있다.
            */

       
            function get_members(){
                return ['egoing','k8805','sorialgi']
            }

            var members = get_members()
            document.write(members[0])
            document.write(members[1])
            document.write(members[2])


=======================================================================

 function get_members(){
                return ['egoing','k8805','sorialgi']

            }

            members = get_members();
            document.write(members[0].toUpperCase());
            document.write(members[1].toUpperCase());
            document.write(members[2].toUpperCase());

            내부 값의 문자열을 대문자로 만들어 출력하고싶다면 toUpperCase를 사용.

=====================================================================

function get_members(){
                return ['egoing','k8805']

            }

            members = get_members();

            for(var i = 0; i < members.length; i++){  ----이 부분이 중요하다
                                고정된 배열의 개수보다 배열의 개수가 동적으로 '
                                변하게 된다고 생각한다면 
                                배열의 길이만큼을 주어지게 해 준다면 
                                자동으로 고치지 않아도 현재 맞는 개수와 값을 
                                출력할수있게 만들수있다. 그것이 핵심.
                document.write(members[i].toUpperCase()+"<br />");
            }

=====================================================================

배열의 제어

효율적으로 배열을 관리 전달 하기 위한 목적으로 고안된 데이터 타입
데이터 추가 삭제 변경와 같은 일을 편리하게 할수있도록 돕는 다양한 기능을 가지고 있다.
